externalSecret:
  databaseSecretName: onprem
  databaseSecretRepoName: enkryptaivpc/on-prem
  secretStoreRefName: enkryptai-clustersecret-store
  
secret:
  onprem: 
    name: onprem
  jwt:
    secretRef: "onprem"
    secretRefKey:
      anonKey: anonKey
      serviceKey: serviceKey
      secret: secretjwt
  db:
    secretRef: "onprem"
    secretRefKey:
      username: dbusername
      password: dbpassword
      database: dbdatabase
  analytics:
    apiKey: ""
    secretRef: ""
    secretRefKey:
      apiKey: apiKey
  smtp:
    secretRef: "onprem"
    secretRefKey:
      username: smtpusername
      password: smtppassword
  dashboard:
    secretRef: "onprem"
    secretRefKey:
      username: dashboardusername
      password: dashboardpassword
  s3:
    secretRef: "onprem"
    secretRefKey:
      keyId: S3keyId
      accessKey: S3accessKey

# We are using cnpg
db:
  enabled: false
  image:
    repository: supabase/postgres
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations:
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 5432
  environment:
    POSTGRES_HOST: /var/run/postgresql
    PGPORT: "5432"
    POSTGRES_PORT: "5432"
    JWT_EXP: 3600
  resources: {}
  persistence:
    enabled: true
    storageClassName: "gp3-encrypted"
    annotations: {}
    size: 8Gi
    accessModes:
      - ReadWriteOnce
    class: ""
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  config: {}


studio:
  enabled: true
  image:
    repository: supabase/studio
    pullPolicy: IfNotPresent
    tag: "20240326-5e5586d"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe:
    httpGet:
      path: /api/profile
      port: 3000
    initialDelaySeconds: 3
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "5"
    "helm.sh/hook": post-install
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 3000
  environment:
    SUPABASE_TYPE: "studio"
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}
# Auth Service
# Secrets Done
auth:
  enabled: true
  image:
    repository: supabase/gotrue
    pullPolicy: IfNotPresent
    tag: "v2.169.0"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9999
  environment:
    GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "/auth/v1/verify"
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Secrets Done 
rest:
  enabled: true
  image:
    repository: postgrest/postgrest
    pullPolicy: IfNotPresent
    tag: "v12.2.8"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 3000
  environment:
    PGRST_DB_ANON_ROLE: anon
    PGRST_APP_SETTINGS_JWT_EXP: 3600
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}


realtime:
  enabled: false
  image:
    repository: supabase/realtime
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 4000
  environment:
    DB_AFTER_CONNECT_QUERY: "SET search_path TO _realtime"
    DB_ENC_KEY: supabaserealtime
    PORT: "4000"
    FLY_ALLOC_ID: fly123
    FLY_APP_NAME: realtime
    SECRET_KEY_BASE: UpNVntnq
    ERL_AFLAGS: -proto_dist inet_tcp
    ENABLE_TAILSCALE: "false"
    DNS_NODES: "''"
  envFrom:
    - secretRef:
        name: on-prem
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

#Secrets Done
meta:
  enabled: true
  image:
    repository: supabase/postgres-meta
    pullPolicy: IfNotPresent
    tag: "v0.86.0"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8080
  environment:
    PG_META_PORT: "8080"
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}

#Secrets Done
storage:
  enabled: true
  image:
    repository: supabase/storage-api
    pullPolicy: IfNotPresent
    tag: "v1.19.1"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: "supabase-storage"
  fullnameOverride: "supabase-storage"
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 5000
  environment:
    PGOPTIONS: -c search_path=storage,public
    FILE_SIZE_LIMIT: "52428800"
    STORAGE_BACKEND: s3  
    FILE_STORAGE_BACKEND_PATH: /var/lib/storage
    REGION: stub
    GLOBAL_S3_BUCKET: stub
    GLOBAL_S3_ENDPOINT: http://minio:9000
    GLOBAL_S3_PROTOCOL: http
    GLOBAL_S3_FORCE_PATH_STYLE: true
    AWS_DEFAULT_REGION: stub
  resources: {}
  persistence:
    enabled: true
    storageClassName: "gp3-encrypted"
    annotations: {}
    size: 20Gi
    accessModes:
      - ReadWriteOnce
    class: ""
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}

# imgproxy
imgproxy:
  enabled: false
  image:
    repository: darthsim/imgproxy
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 5001
  environment:
    IMGPROXY_BIND: ":5001"
    IMGPROXY_LOCAL_FILESYSTEM_ROOT: /
    IMGPROXY_USE_ETAG: "true"
    IMGPROXY_ENABLE_WEBP_DETECTION: "true"
  resources: {}
  persistence:
    enabled: true
    storageClassName: "gp3-encrypted"
    annotations: {}
    size: 10Gi
    accessModes:
      - ReadWriteOnce
    class: ""
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Secrets Done
kong:
  enabled: true
  image:
    repository: kong
    pullPolicy: IfNotPresent
    tag: "2.8.1"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 8000
  environment:
    KONG_DATABASE: "off"
    KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
    KONG_DNS_ORDER: LAST,A,CNAME
    KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
    KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
    KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    KONG_LOG_LEVEL: warn
  ingress:
    enabled: false
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    tls: []
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}

analytics:
  enabled: false
  image:
    repository: supabase/logflare
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 4000
  environment:
    LOGFLARE_NODE_HOST: 127.0.0.1
    DB_USERNAME: supabase_admin
    DB_PORT: 5432
    DB_DRIVER: postgresql
    DB_SCHEMA: _analytics
    LOGFLARE_SINGLE_TENANT: "true"
    LOGFLARE_SUPABASE_MODE: "true"
    FEATURE_FLAG_OVERRIDE: multibackend=true
  bigQuery:
    enabled: false
    projectId: google-project-id
    projectNumber: google-project-number
    gcloudJson: ""
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

vector:
  enabled: false
  image:
    repository: timberio/vector
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9001
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

functions:
  enabled: false
  image:
    repository: supabase/edge-runtime
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9000
  environment:
    DB_USERNAME: supabase_functions_admin
    DB_PORT: 5432
    DB_DRIVER: postgresql
    DB_SSL: disable  # disable, allow, prefer, require, verify-ca, verify-full
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}

# minio
# Secrets Done
minio:
  enabled: true
  image:
    repository: minio/minio
    pullPolicy: IfNotPresent
    tag: "latest"
  imagePullSecrets: []
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""
  livenessProbe: {}
  readinessProbe: {}
  serviceAccount:
    create: true
    annotations: {}
    name: ""
  podAnnotations: 
    "helm.sh/hook-weight": "15"
    "helm.sh/hook": post-install, post-upgrade
  podSecurityContext: {}
  securityContext: {}
  service:
    type: ClusterIP
    port: 9000
  environment: {}
  resources: {}
  persistence:
    enabled: true
    storageClassName: "gp3-encrypted"
    annotations: {}
    size: 50Gi
    accessModes:
      - ReadWriteOnce
    class: ""
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 3
    targetCPUUtilizationPercentage: 85
  nodeSelector: {}
  tolerations: []
  affinity: {}
