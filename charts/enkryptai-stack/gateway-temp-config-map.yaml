apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-kong-temp-config
  namespace: enkryptai-stack 
data:
  kong.yaml: |
    _format_version: "3.0"
    plugins:
    - name: opentelemetry
      # instance_name: opentelemetry
      config:
        traces_endpoint: http://tempo.monitoring:4318/v1/traces
    - name: prometheus
      # instance_name: prometheus
      enabled: true
      config:
        per_consumer: false
    - name: correlation-id
      # instance_name: correlation_id
      enabled: true
      config:
        echo_downstream: false
        generator: tracker
        header_name: x-enkrypt-correlation-id
      protocols:
      - http
      - https
    services:
    - name: enkrypt_db_proxy
      enabled: true
      host: ${{ env "DECK_APP_DASHBOARD_DOMAIN" }}
      connect_timeout: 60000
      port: ${{ env "DECK_APP_DASHBOARD_PORT" }}
      protocol: ${{ env "DECK_APP_DASHBOARD_SCHEME" }}
      # read_timeout: 60000
      # Assuming a worst case scenario of 0.1 MB/s download speed
      # 10 MB / 0.1 MB/s = 100 s = 1 min 40 s
      read_timeout: 180000 # 3 min
      retries: 5
      write_timeout: 60000
      plugins:
      # - name: cors
      #   # instance_name: enkrypt_guardrails_cors
      #   enabled: true
      #   config:
      #     credentials: false
      #     exposed_headers: []
      #     headers: []
      #     max_age: 86400
      #     methods:
      #     - GET
      #     - POST
      #     - OPTIONS
      #     origins:
      #     # # NOTE: This allows only one origin
      #     - https://enkryptai.com
      #     preflight_continue: false
      #     private_network: false
      #   protocols:
      #   - https
      - name: enkrypt-db-proxy
        # instance_name: enkrypt_db_proxy
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          internal_kong_admin_email: ${{ env "DECK_INTERNAL_KONG_ADMIN_EMAIL" }}
          red_team_url: ${{ env "DECK_RED_TEAMING_URL" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
          initial_sample_model_password: '${{ env "DECK_INITIAL_SAMPLE_MODEL_PASSWORD" }}'
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_db_proxy_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.password: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-enkrypt-initial-sample-model-password: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.body.access_token: return nil
            response.body.id_token: return nil
            response.body.refresh_token: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5043
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 25000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_dashboard_db_proxy
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/guardrails/add-policy
        - /dashboard/guardrails/modify-policy
        - /dashboard/guardrails/get-policy
        - /dashboard/guardrails/delete-policy
        - /dashboard/guardrails/list-policies
        - /dashboard/code-of-conduct/add-policy
        - /dashboard/code-of-conduct/modify-policy
        - /dashboard/code-of-conduct/get-policy
        - /dashboard/code-of-conduct/delete-policy
        - /dashboard/code-of-conduct/list-policies
        - /dashboard/models/add-model
        - /dashboard/models/modify-model
        - /dashboard/models/get-model
        - /dashboard/models/delete-model
        - /dashboard/models/list-models
        - /dashboard/models/get-defaults
        - /dashboard/deployments/add-deployment
        - /dashboard/deployments/modify-deployment
        - /dashboard/deployments/get-deployment
        - /dashboard/deployments/delete-deployment
        - /dashboard/deployments/list-deployments
        - /dashboard/deployments/get-allowed-config
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: basic-auth
          # instance_name: enkrypt_dashboard_db_proxy_basic_auth
          enabled: true
          config:
            hide_credentials: true
          protocols:
          - http
          - https
      - name: enkrypt_db_proxy
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /guardrails/add-policy
        - /guardrails/modify-policy
        - /guardrails/get-policy
        - /guardrails/delete-policy
        - /guardrails/list-policies
        - /code-of-conduct/add-policy
        - /code-of-conduct/modify-policy
        - /code-of-conduct/get-policy
        - /code-of-conduct/delete-policy
        - /code-of-conduct/list-policies
        - /models/add-model
        - /models/modify-model
        - /models/get-model
        - /models/delete-model
        - /models/list-models
        - /models/get-defaults
        - /deployments/add-deployment
        - /deployments/modify-deployment
        - /deployments/get-deployment
        - /deployments/delete-deployment
        - /deployments/list-deployments
        - /deployments/get-allowed-config
        - /redteam/get-task
        - /redteam/task-status
        - /redteam/delete-task
        - /redteam/list-tasks
        - /redteam/download-link
        - /redteam/results/summary
        - /redteam/v2/results/summary
        - /redteam/v3/results/summary
        - /redteam/results/details
        - /redteam/v2/results/details
        - /redteam/v3/results/details
        - /datasets/get-task
        - /datasets/task-status
        - /datasets/delete-task
        - /datasets/list-tasks
        - /datasets/get-datacard
        - /datasets/get-dataset
        - /datasets/get-summary
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: key-auth
          # instance_name: enkrypt_db_proxy_key_auth
          enabled: true
          config:
            anonymous: null
            hide_credentials: true
            key_in_body: false
            key_in_header: true
            key_in_query: false
            key_names:
            - apikey
            - api_key
            run_on_preflight: true
          protocols:
          - http
          - https
        - name: cors
          # instance_name: enkrypt_db_proxy_cors
          enabled: true
          config:
            credentials: false
            exposed_headers: []
            headers: []
            max_age: 86400
            methods:
            - GET
            # - POST
            - OPTIONS
            origins:
            # # NOTE: This allows only one origin
            - '*'
            preflight_continue: false
            private_network: false
          protocols:
          - https
    - name: enkrypt_guardrails
      enabled: true
      host: ${{ env "DECK_GUARDRAILS_HOST" }}
      connect_timeout: 60000
      port: ${{ env "DECK_GUARDRAILS_PORT" }}
      protocol: ${{ env "DECK_GUARDRAILS_SCHEME" }}
      read_timeout: 300000 # 5 min as we deal with PDF, images, audio, etc.
      retries: 5
      write_timeout: 300000 # 5 min as we deal with PDF, images, audio, etc.
      plugins:
      # - name: cors
      #   # instance_name: enkrypt_guardrails_cors
      #   enabled: true
      #   config:
      #     credentials: false
      #     exposed_headers: []
      #     headers: []
      #     max_age: 86400
      #     methods:
      #     - GET
      #     - POST
      #     - OPTIONS
      #     origins:
      #     # # NOTE: This allows only one origin
      #     - https://enkryptai.com
      #     preflight_continue: false
      #     private_network: false
      #   protocols:
      #   - https
      - name: key-auth
        # instance_name: enkrypt_guardrails_key_auth
        enabled: true
        config:
          anonymous: null
          hide_credentials: true
          key_in_body: false
          key_in_header: true
          key_in_query: false
          key_names:
          - apikey
          - api_key
          run_on_preflight: true
        protocols:
        - http
        - https
      - name: enkrypt-guardrails
        # instance_name: enkrypt_guardrails
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_guardrails_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.password: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.body.access_token: return nil
            response.body.id_token: return nil
            response.body.refresh_token: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5044
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 25000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      - name: cors
        # instance_name: enkrypt_guardrails_cors
        enabled: true
        config:
          credentials: false
          exposed_headers: []
          headers: []
          max_age: 86400
          methods:
          - GET
          - POST
          - OPTIONS
          origins:
          # # NOTE: This allows only one origin
          - '*'
          preflight_continue: false
          private_network: false
        protocols:
        - https
      routes:
      - name: enkrypt_guardrails
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /guardrails/health
        - /guardrails/status
        - /guardrails/models
        - /guardrails/detect
        - /guardrails/batch/detect
        # For backward compatibility
        - /guardrails/batch/policy/detect
        - /guardrails/policy/batch/detect
        - /guardrails/policy/detect
        # Need guardrails-policy for backward compatibility
        - /guardrails-policy/detect
        - /guardrails/pii
        - /guardrails/hallucination
        - /guardrails/adherence
        - /guardrails/relevancy
        - /guardrails/policy-atomizer
        - /guardrails/detect-image
        - /guardrails/detect-audio
        - /guardrails/scan-url
        - /guardrails/policy/scan-url
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
    - name: enkrypt_red_teaming
      enabled: true
      host: ${{ env "DECK_RED_TEAMING_HOST" }}
      connect_timeout: 60000
      port: ${{ env "DECK_RED_TEAMING_PORT" }}
      protocol: ${{ env "DECK_RED_TEAMING_SCHEME" }}
      read_timeout: 300000 # 5 min
      retries: 5
      write_timeout: 60000
      plugins:
      - name: enkrypt-red-teaming
        # instance_name: enkrypt_red_teaming
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          internal_kong_admin_email: ${{ env "DECK_INTERNAL_KONG_ADMIN_EMAIL" }}
          red_team_url: ${{ env "DECK_RED_TEAMING_URL" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
          sample_model_real_apikey: ${{ env "DECK_SAMPLE_MODEL_REAL_APIKEY" }}
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_red_teaming_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.target_model_configuration.model_api_key: return nil
            request.body.target_model_configuration.model_jwt_config: return nil
            request.body.model_config.apikeys: return nil
            request.body.model_config.model_jwt_config: return nil
            request.body.endpoint_configuration.model_config.apikeys: return nil
            request.body.endpoint_configuration.model_config.model_jwt_config: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5045
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 25000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_dashboard_red_teaming
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/datasets/add-task
        - /dashboard/datasets/model/add-task
        - /dashboard/redteam/risk-mitigation/system-prompt
        - /dashboard/redteam/risk-mitigation/guardrails-policy
        - /dashboard/redteam/findings
        - /dashboard/redteam/add-task
        - /dashboard/redteam/v2/add-task
        - /dashboard/redteam/v2/add-custom-task
        - /dashboard/redteam/v3/add-custom-task
        - /dashboard/redteam/model/add-task
        - /dashboard/redteam/v2/model/add-task
        - /dashboard/redteam/v2/model/add-custom-task
        - /dashboard/redteam/v3/model/add-custom-task
        - /dashboard/redteam/model-health
        - /dashboard/redteam/v3/model-health
        - /dashboard/redteam/model/model-health
        - /dashboard/redteam/v3/model/model-health
        - /dashboard/playground/redteam/attack
        - /dashboard/playground/redteam/model/attack
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: basic-auth
          # instance_name: enkrypt_dashboard_red_teaming_basic_auth
          enabled: true
          config:
            hide_credentials: true
          protocols:
          - http
          - https
      - name: enkrypt_red_teaming
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /redteam/health
        - /datasets/add-task
        - /datasets/model/add-task
        - /redteam/model-health
        - /redteam/v3/model-health
        - /redteam/model/model-health
        - /redteam/v3/model/model-health
        - /redteam/risk-mitigation/system-prompt
        - /redteam/risk-mitigation/guardrails-policy
        - /redteam/findings
        - /redteam/add-task
        - /redteam/v2/add-task
        - /redteam/v2/add-custom-task
        - /redteam/v3/add-custom-task
        - /redteam/model/add-task
        - /redteam/v2/model/add-task
        - /redteam/v2/model/add-custom-task
        - /redteam/v3/model/add-custom-task
        - /redteam/cancel-task
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: key-auth
          # instance_name: enkrypt_red_teaming_key_auth
          enabled: true
          config:
            anonymous: null
            hide_credentials: true
            key_in_body: false
            key_in_header: true
            key_in_query: false
            key_names:
            - apikey
            - api_key
            run_on_preflight: true
          protocols:
          - http
          - https
      - name: enkrypt_red_teaming_public
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /public/redteam/v2/add-custom-task
        - /public/redteam/v3/add-custom-task
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: rate-limiting
          # instance_name: enkrypt_red_teaming_public_rate_limiting
          enabled: true
          config:
            limit_by: ip
            second: 1
            minute: 3
            hour: 5
            day: 5
            policy: redis
            fault_tolerant: false # To prevent abuse when redis is down
            redis_database: 0
            redis_host: ${{ env "DECK_KEYDB_HOST" }}
            redis_port: 6379
            redis_username: null
            redis_password: null
            redis_server_name: ${{ env "DECK_KEYDB_HOST" }}
            redis_ssl: false
            redis_ssl_verify: false
            redis_timeout: 2000
          protocols:
          - http
          - https
    - name: enkrypt_red_teaming_playground
      # Creating a new service with longer read_timeout
      # As /attack API might take upto 15 min 
      enabled: true
      host: ${{ env "DECK_RED_TEAMING_HOST" }}
      connect_timeout: 60000
      port: ${{ env "DECK_RED_TEAMING_PORT" }}
      protocol: ${{ env "DECK_RED_TEAMING_SCHEME" }}
      read_timeout: 900000 # 15 min
      retries: 5
      write_timeout: 60000
      plugins:
      - name: enkrypt-red-teaming
        # instance_name: enkrypt_red_teaming_playground
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          internal_kong_admin_email: ${{ env "DECK_INTERNAL_KONG_ADMIN_EMAIL" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          red_team_url: ${{ env "DECK_RED_TEAMING_URL" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
          sample_model_real_apikey: ${{ env "DECK_SAMPLE_MODEL_REAL_APIKEY" }}
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_red_teaming_playground_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.target_model_configuration.model_api_key: return nil
            request.body.target_model_configuration.model_jwt_config: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5045
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 25000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_dashboard_playground_red_teaming
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/playground/redteam
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: basic-auth
          # instance_name: enkrypt_dashboard_red_teaming_playground_basic_auth
          enabled: true
          config:
            hide_credentials: true
          protocols:
          - http
          - https
    - name: enkrypt_wss_red_team_logs
      enabled: true
      host: ${{ env "DECK_RED_TEAMING_HOST" }}
      connect_timeout: 60000
      port: ${{ env "DECK_RED_TEAMING_PORT" }}
      protocol: ${{ env "DECK_RED_TEAMING_SCHEME" }}
      path: /ws
      read_timeout: 3600000 # 1 hour
      retries: 5
      write_timeout: 60000
      routes:
      - name: enkrypt_dashboard_wss_red_team_logs
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/wss/redteam/logs/tasks
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: basic-auth
          # instance_name: enkrypt_dashboard_wss_red_team_logs_basic_auth
          enabled: true
          config:
            hide_credentials: true
          protocols:
          - http
          - https
      - name: enkrypt_wss_red_team_logs
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /wss/redteam/logs/tasks
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        # NOTE: key_in_query and not key_in_header because of websockets limitation in browsers
        # https://stackoverflow.com/questions/4361173/http-headers-in-websockets-client-api
        - name: key-auth
          # instance_name: enkrypt_wss_red_team_logs_basic_auth
          enabled: true
          config:
            anonymous: null
            hide_credentials: true
            key_in_body: false
            key_in_header: false
            key_in_query: true
            key_names:
            - apikey
            - api_key
            run_on_preflight: true
          protocols:
          - http
          - https
        - name: rate-limiting
          # TODO: Create custom plugin to rate limit based on consumer subscription plan
          # instance_name: enkrypt_wss_red_team_logs_rate_limiting
          enabled: true
          config:
            limit_by: ip
            second: 5
            minute: 25
            hour: 150
            policy: local
            fault_tolerant: true
            # Below default config is to avoid changes in deck output for each deployment
            # As Kong adds these but Deck removes them in each deployment and shows as an update
            redis_database: 0
            redis_host: null
            redis_password: null
            redis_port: 6379
            redis_server_name: null
            redis_ssl: false
            redis_ssl_verify: false
            redis_timeout: 2000
            redis_username: null
          protocols:
          - http
          - https
        - name: post-function
          enabled: true
          protocols:
          - http
          - https
          config:
            access:
            - |
              -- Validate path user_id with custom_id user_id
              kong.log.debug("Log request path: ", kong.request.get_path())
              local uuid_pattern = "%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x"
              local path_user_id = string.match(kong.request.get_path(), "tasks/(" .. uuid_pattern .. ")")
              local custom_id = kong.client.get_consumer().custom_id or ""
              local is_project_user = custom_id:find("@")
              local user_id_or_org_id
              if is_project_user then
                kong.log.debug("Project user for logs: ", custom_id)
                _, user_id_or_org_id = custom_id:match("^([^|]*)|([^|]*)|([^|]*)|([^|]*)|([^|]*)$")
              else
                kong.log.debug("Regular user for logs: ", custom_id)
                user_id_or_org_id = custom_id:match("^(.-)|")
              end
              kong.log.debug("wss path_user_id for logs: ", path_user_id, " and wss user_id_or_org_id: ", user_id_or_org_id)
              if user_id_or_org_id ~= path_user_id then
                kong.log.debug("User ID mismatch for logs")
                return kong.response.exit(403, { message = "Forbidden" })
              end
              kong.log.debug("User ID matched for logs. Allowing request for user_id_or_org_id: ", user_id_or_org_id)
    - name: enkrypt_wss_red_team_v2_logs
      enabled: true
      host: ${{ env "DECK_RED_TEAMING_HOST" }}
      connect_timeout: 60000
      port: ${{ env "DECK_RED_TEAMING_PORT" }}
      protocol: ${{ env "DECK_RED_TEAMING_SCHEME" }}
      path: /v2/ws
      read_timeout: 3600000 # 1 hour
      retries: 5
      write_timeout: 60000
      routes:
      - name: enkrypt_dashboard_wss_red_team_v2_logs
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/wss/redteam/v2/logs/tasks
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: basic-auth
          # instance_name: enkrypt_dashboard_wss_red_team_v2_logs_basic_auth
          enabled: true
          config:
            hide_credentials: true
          protocols:
          - http
          - https
      - name: enkrypt_wss_red_team_v2_logs
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /wss/redteam/v2/logs/tasks
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        # NOTE: key_in_query and not key_in_header because of websockets limitation in browsers
        # https://stackoverflow.com/questions/4361173/http-headers-in-websockets-client-api
        - name: key-auth
          # instance_name: enkrypt_wss_red_team_v2_logs_basic_auth
          enabled: true
          config:
            anonymous: null
            hide_credentials: true
            key_in_body: false
            key_in_header: false
            key_in_query: true
            key_names:
            - apikey
            - api_key
            run_on_preflight: true
          protocols:
          - http
          - https
        - name: rate-limiting
          # TODO: Create custom plugin to rate limit based on consumer subscription plan
          # instance_name: enkrypt_wss_red_team_logs_rate_limiting
          enabled: true
          config:
            limit_by: ip
            second: 5
            minute: 25
            hour: 150
            policy: local
            fault_tolerant: true
            # Below default config is to avoid changes in deck output for each deployment
            # As Kong adds these but Deck removes them in each deployment and shows as an update
            redis_database: 0
            redis_host: null
            redis_password: null
            redis_port: 6379
            redis_server_name: null
            redis_ssl: false
            redis_ssl_verify: false
            redis_timeout: 2000
            redis_username: null
          protocols:
          - http
          - https
        - name: post-function
          enabled: true
          protocols:
          - http
          - https
          config:
            access:
            - |
              -- Validate path user_id with custom_id user_id
              kong.log.debug("Log request path: ", kong.request.get_path())
              local uuid_pattern = "%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x"
              local path_user_id = string.match(kong.request.get_path(), "tasks/(" .. uuid_pattern .. ")")
              local custom_id = kong.client.get_consumer().custom_id or ""
              local is_project_user = custom_id:find("@")
              local user_id_or_org_id
              if is_project_user then
                kong.log.debug("Project user for logs: ", custom_id)
                _, user_id_or_org_id = custom_id:match("^([^|]*)|([^|]*)|([^|]*)|([^|]*)|([^|]*)$")
              else
                kong.log.debug("Regular user for logs: ", custom_id)
                user_id_or_org_id = custom_id:match("^(.-)|")
              end
              kong.log.debug("wss path_user_id for logs: ", path_user_id, " and wss user_id_or_org_id: ", user_id_or_org_id)
              if user_id_or_org_id ~= path_user_id then
                kong.log.debug("User ID mismatch for logs")
                return kong.response.exit(403, { message = "Forbidden" })
              end
              kong.log.debug("User ID matched for logs. Allowing request for user_id_or_org_id: ", user_id_or_org_id)
    - name: enkrypt_leaderboard
      enabled: true
      host: ${{ env "DECK_LEADERBOARD_HOST" }}
      connect_timeout: 60000
      port: 443
      protocol: ${{ env "DECK_LEADERBOARD_SCHEME" }}
      path: /api
      read_timeout: 60000
      retries: 5
      write_timeout: 60000
      plugins:
      - name: enkrypt-leaderboard
        # instance_name: enkrypt_leaderboard
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          leaderboard_auth: ${{ env "DECK_LEADERBOARD_AUTH" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          leaderboard_details_password: '${{ env "DECK_LEADERBOARD_DETAILS_PASSWORD" }}'
          leaderboard_public_consumer_email: ${{ env "DECK_LEADERBOARD_PUBLIC_CONSUMER_EMAIL" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_leaderboard_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.target_model_configuration.model_api_key: return nil
            request.body.target_model_configuration.model_jwt_config: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-enkrypt-extra-authorization: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5046
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 25000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_leaderboard
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /leaderboard
        - /leaderboard/v2
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
          - name: cors
            # instance_name: enkrypt_leaderboard_cors
            enabled: true
            config:
              credentials: false
              exposed_headers: []
              headers: []
              max_age: 86400
              methods:
              - GET
              - OPTIONS
              origins:
              # # NOTE: This allows only one origin
              - '${{ env "DECK_LEADERBOARD_CORS_ORIGIN" }}'
              preflight_continue: false
              private_network: false
            protocols:
            - https
          - name: key-auth
            # instance_name: enkrypt_leaderboard_key_auth
            enabled: true
            config:
              anonymous: null
              hide_credentials: true
              key_in_body: false
              key_in_header: true
              key_in_query: false
              key_names:
              - apikey
              - api_key
              run_on_preflight: true
            protocols:
            - http
            - https
    - name: enkrypt_admin
      enabled: true
      host: localhost
      connect_timeout: 60000
      port: 8001
      protocol: http
      read_timeout: 60000
      retries: 5
      write_timeout: 60000
      plugins:
      - name: rate-limiting
        # instance_name: enkrypt_admin_rate_limiting
        # TODO: Enable rate-limiting for admin
        enabled: false
        config:
          limit_by: ip
          second: 3 # Next.js makes 3 calls during signup
          minute: 10 # Allowing creation of multiple API keys
          hour: 50 # Allowing multiple refreshes on dashboard
          policy: local
          fault_tolerant: true
          # Below default config is to avoid changes in deck output for each deployment
          # As Kong adds these but Deck removes them in each deployment and shows as an update
          redis_database: 0
          redis_host: null
          redis_password: null
          redis_port: 6379
          redis_server_name: null
          redis_ssl: false
          redis_ssl_verify: false
          redis_timeout: 2000
          redis_username: null
        protocols:
        - http
        - https  
      - name: basic-auth
        # instance_name: enkrypt_admin_basic_auth
        enabled: true
        config:
          hide_credentials: true
        protocols:
        - http
        - https
      - name: enkrypt-admin
        # instance_name: enkrypt_admin
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          kong_admin_url: http://localhost:8001
          internal_kong_admin_email: ${{ env "DECK_INTERNAL_KONG_ADMIN_EMAIL" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          red_team_url: ${{ env "DECK_RED_TEAMING_URL" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_admin_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.attributes.apikeys: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.body.data.key: return nil
            response.body.key: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5043
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 10000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_admin_dashboard
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/admin
    - name: enkrypt_logs
      enabled: true
      host: ${{ env "DECK_ELASTIC_HOST" }}
      connect_timeout: 60000
      port: 9200
      protocol: https
      read_timeout: 120000
      retries: 5
      write_timeout: 120000
      plugins:
      - name: rate-limiting
        # instance_name: enkrypt_logs_rate_limiting
        # TODO: Enable rate-limiting for logs
        enabled: false
        config:
          limit_by: ip
          second: 10  # Assuming 10 calls to display all dashboards
          minute: 30  # And letting user refresh the page
                      # And add more filters to some dashboards
          hour: 150   # Allowing multiple refreshes like every 5 minutes               
          policy: local
          fault_tolerant: true
          # Below default config is to avoid changes in deck output for each deployment
          # As Kong adds these but Deck removes them in each deployment and shows as an update
          redis_database: 0
          redis_host: null
          redis_password: null
          redis_port: 6379
          redis_server_name: null
          redis_ssl: false
          redis_ssl_verify: false
          redis_timeout: 2000
          redis_username: null
        protocols:
        - http
        - https 
      - name: basic-auth
        # instance_name: enkrypt_logs_basic_auth
        enabled: true
        config:
          hide_credentials: true
        protocols:
        - http
        - https
      - name: enkrypt-logs
        # instance_name: enkrypt_logs
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          elastic_basic_auth: ${{ env "DECK_KONG_LOGS_PLUGIN_ELASTIC_BASIC_AUTH" }}
          internal_kong_admin_email: ${{ env "DECK_INTERNAL_KONG_ADMIN_EMAIL" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_logs_dashboard
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /dashboard/logs
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
    - name: enkrypt_ai_proxy
      enabled: true
      # Dummy host as we set this in the ai-proxy plugin
      host: example.com
      connect_timeout: 60000
      port: 443
      protocol: https
      read_timeout: 60000
      retries: 5
      write_timeout: 60000
      plugins:
      # - name: cors
      #   # instance_name: enkrypt_ai_proxy_cors
      #   enabled: true
      #   config:
      #     credentials: false
      #     exposed_headers: []
      #     headers: []
      #     max_age: 86400
      #     methods:
      #     - GET
      #     - POST
      #     - OPTIONS
      #     origins:
      #     # # NOTE: This allows only one origin
      #     - https://enkryptai.com
      #     preflight_continue: false
      #     private_network: false
      #   protocols:
      #   - https
      - name: enkrypt-ai-proxy
        # instance_name: enkrypt_ai_proxy
        enabled: true
        config:
          enkrypt_environment: ${{ env "DECK_ENKRYPT_ENVIRONMENT" }}
          openfga_url: ${{ env "DECK_OPENFGA_URL" }}
          fga_store_id: ${{ env "DECK_OPENFGA_STORE_ID" }}
          fga_authorization_model_id: ${{ env "DECK_OPENFGA_AUTHORIZATION_MODEL_ID" }}
          next_js_app_url: ${{ env "DECK_APP_DASHBOARD_DOMAIN_URL" }}
          next_js_basic_auth: ${{ env "DECK_NEXT_JS_BASIC_AUTH" }}
          vercel_protection_auth: ${{ env "DECK_VERCEL_PROTECTION_AUTH" }}
          keydb_domain: ${{ env "DECK_KEYDB_HOST" }}
          guardrails_scheme: ${{ env "DECK_GUARDRAILS_SCHEME" }}
          guardrails_host: ${{ env "DECK_GUARDRAILS_HOST" }}
          guardrails_port: ${{ env "DECK_GUARDRAILS_PORT" }}
          max_request_body_size: 8192
          response_streaming: allow
          model_name_header: true
          log_statistics: true
          log_payloads: true
          sample_model_real_apikey: ${{ env "DECK_SAMPLE_MODEL_REAL_APIKEY" }}
        protocols:
        - http
        - https
      - name: http-log
        # instance_name: elastic_enkrypt_ai_proxy_log
        enabled: true
        config:
          content_type: application/json
          custom_fields_by_lua:
            consumer.type: return nil
            consumer.username_lower: return nil
            debug_info: return nil
            http_log: return nil
            plugin_info: return nil
            request.body.password: return nil
            request.headers.api-key: return nil
            request.headers.api_key: return nil
            request.headers.apikey: return nil
            request.headers.authorization: return nil
            request.headers.x-consumer-custom-id: return nil
            request.headers.x-consumer-id: return nil
            request.headers.x-consumer-username: return nil
            request.headers.x-credential-identifier: return nil
            request.headers.x-enkrypt-correlation-id: return nil
            request.ngx_req_id: return ngx.var.request_id
            request.tls: return nil
            response.body.access_token: return nil
            response.body.id_token: return nil
            response.body.refresh_token: return nil
            response.headers.x-kong-proxy-latency: return nil
            response.headers.x-kong-response-latency: return nil
            response.headers.x-kong-upstream-latency: return nil
            route.created_at: return nil
            route.https_redirect_status_code: return nil
            route.id: return nil
            route.path_handling: return nil
            route.preserve_host: return nil
            route.protocols: return nil
            route.regex_priority: return nil
            route.request_buffering: return nil
            route.response_buffering: return nil
            route.service: return nil
            route.strip_path: return nil
            route.tags: return nil
            route.updated_at: return nil
            route.ws_id: return nil
            service: return nil
            tls: return nil
            tries: return nil
            upstream_status: return nil
            workspace: return nil
            workspace_name: return nil
          flush_timeout: null
          headers: {}
          http_endpoint: http://${{ env "DECK_FLUENT_BIT_HOST" }}:5047
          keepalive: 60000
          method: POST
          queue:
            initial_retry_delay: 0.01
            max_batch_size: 250
            max_bytes: null
            max_coalescing_delay: 5
            max_entries: 25000
            max_retry_delay: 60
            max_retry_time: 60
          queue_size: null
          retry_count: null
          timeout: 10000
        protocols:
        - http
        - https
      routes:
      - name: enkrypt_ai_proxy
        https_redirect_status_code: 426
        path_handling: v0
        paths:
        - /ai-proxy
        preserve_host: false
        protocols:
        - http
        - https
        regex_priority: 0
        request_buffering: true
        response_buffering: true
        strip_path: true
        plugins:
        - name: key-auth
          # instance_name: enkrypt_ai_proxy_key_auth
          enabled: true
          config:
            anonymous: null
            hide_credentials: true
            key_in_body: false
            key_in_header: true
            key_in_query: true
            key_names:
            - apikey
            - api_key
            run_on_preflight: true
          protocols:
          - http
          - https

  kong-deck.sh: |
    #!/bin/sh

    # This script is used to setup the initial internal Kong admin consumer if it does not exist
    # It needs curl to call the Kong Admin API. Hence, creating a custom entrypoint script and custom Dockerfile

    # Check if curl is installed
    if ! command -v curl >/dev/null 2>&1; then
      echo "curl is not installed. Please install curl and rerun the script."
      exit 1
    fi

    # ---------------------------------------------------------
    # Internal Kong admin user setup
    # ---------------------------------------------------------

    # Check if the internal Kong admin user exists
    checkInternalUserResponse=$(curl -s -o /dev/null -w "%{http_code}" $DECK_KONG_ADDR/consumers/$DECK_INTERNAL_KONG_ADMIN_EMAIL)

    echo "GET existing internal consumer response: $checkInternalUserResponse"

    # Flag to check if existing basic auth credentials need to be checked
    CheckInternalUserBasicAuth=false

    # Flag to check if basic auth credentials need to be created
    CreateInternalUserBasicAuth=false

    # If the user does not exist, create the internal Kong admin user
    if [ "$checkInternalUserResponse" -eq 404 ]; then
      echo "Creating the internal Kong admin user..."

      createInternalUserResponse=$(curl -s -o /dev/null -w "%{http_code}" -i -X POST $DECK_KONG_ADDR/consumers/ --data "{\"username\":\"$DECK_INTERNAL_KONG_ADMIN_EMAIL\"}" --header "Content-Type: application/json")

      echo "POST internal consumer creation response: $createInternalUserResponse"

      if [ "$createInternalUserResponse" -eq 201 ]; then
        CreateInternalUserBasicAuth=true
        echo "The internal Kong admin user has been created successfully."
      else
        echo "An error occurred while creating the internal Kong admin user. HTTP code: $createInternalUserResponse"
        exit 1
      fi

    elif [ "$checkInternalUserResponse" -eq 200 ]; then
      CheckInternalUserBasicAuth=true
      echo "The internal Kong admin user already exists."
    else
      echo "An error occurred while checking the internal Kong admin user. Please check the issue and rerun the script."
    fi

    if [ "$CheckInternalUserBasicAuth" = true ]; then
      # Check if basic-auth credentials exist
      internalUserCredentialsResponse=$(curl -s --write-out "\n%{http_code}" -X GET "$DECK_KONG_ADDR/consumers/$DECK_INTERNAL_KONG_ADMIN_EMAIL/basic-auth")
      # Extract HTTP code (last line)
      checkInternalUserBasicAuthResponseCode=$(echo "$internalUserCredentialsResponse" | tail -n1)
      # Extract JSON body (everything except last line)
      checkInternalUserBasicAuthResponseBody=$(echo "$internalUserCredentialsResponse" | sed '$d')

      echo "GET basic-auth credentials response: $checkInternalUserBasicAuthResponseCode"
      # NOTE: Below logs sensitive info, uncomment only for debugging
      # echo "GET basic-auth credentials response body: $checkInternalUserBasicAuthResponseBody"

      if [ "$checkInternalUserBasicAuthResponseCode" -eq 200 ]; then
        if [ -z "$checkInternalUserBasicAuthResponseBody" ]; then
          echo "Error: Empty response body"
          exit 1
        fi

        # Get length of data array
        # Example empty response: {"next":null,"data":[]}
        # Example non-empty response: {"next":null,"data":[{"created_at":1731176797,...]}
        credentailsLength=$(echo "$checkInternalUserBasicAuthResponseBody" | jq -e -r '(.data | length)' 2>/dev/null)
        jq_exit=$?

        if [ $jq_exit -ne 0 ]; then
          echo "Error: Invalid JSON response or missing .data array"
          echo "Response was: $checkInternalUserBasicAuthResponseBody"
          exit 1
        fi

        echo "Found $credentailsLength credential entries"

        if [ "$credentailsLength" -ge 1 ]; then
          echo "Basic-auth credentials were already created for internal user."
        else
          CreateInternalUserBasicAuth=true
          echo "No basic-auth credentials found for internal user. Need to create them."
        fi

      else
        echo "Failed to check basic-auth credentials. HTTP code: $checkInternalUserBasicAuthResponseCode"
        exit 1
      fi
    fi

    if [ "$CreateInternalUserBasicAuth" = true ]; then
      echo "Creating basic auth credentials for the internal Kong admin user..."

      # Configure basic auth creds for the consumer
      createInternalUserAuthResponse=$(curl -s -o /dev/null -w "%{http_code}" -i -X POST $DECK_KONG_ADDR/consumers/$DECK_INTERNAL_KONG_ADMIN_EMAIL/basic-auth --data "{\"username\":\"$DECK_INTERNAL_KONG_ADMIN_USERNAME\",\"password\":\"$DECK_INTERNAL_KONG_ADMIN_PASSWORD\"}" --header "Content-Type: application/json")

      echo "POST internal consumer basic auth creation response: $createInternalUserAuthResponse"

      if [ "$createInternalUserAuthResponse" -eq 201 ]; then
        echo "The internal Kong admin user basic auth has been created."
      else
        echo "An error occurred while creating the internal Kong admin user basic auth. Please check the issue and rerun the script."
        exit 1
      fi
    fi

    # ---------------------------------------------------------
    # Public Leaderboard user setup
    # ---------------------------------------------------------

    # Check if the public Leaderboard user exists
    checkLeaderboardUserResponse=$(curl -s -o /dev/null -w "%{http_code}" $DECK_KONG_ADDR/consumers/$DECK_LEADERBOARD_PUBLIC_CONSUMER_EMAIL)

    echo "GET existing Leaderboard consumer response: $checkLeaderboardUserResponse"

    # Flag to check if existing key auth credentials need to be checked
    CheckLeaderboardUserKeyAuth=false

    # Flag to check if key auth credentials need to be created
    CreateLeaderboardUserKeyAuth=false

    # If the user does not exist, create the public Leaderboard user
    if [ "$checkLeaderboardUserResponse" -eq 404 ]; then
      echo "Creating the public Leaderboard user..."

      createLeaderboardUserResponse=$(curl -s -o /dev/null -w "%{http_code}" -i -X POST $DECK_KONG_ADDR/consumers/ --data "{\"username\":\"$DECK_LEADERBOARD_PUBLIC_CONSUMER_EMAIL\"}" --header "Content-Type: application/json")

      echo "POST Leaderboard consumer creation response: $createLeaderboardUserResponse"

      if [ "$createLeaderboardUserResponse" -eq 201 ]; then
        CreateLeaderboardUserKeyAuth=true
        echo "The public Leaderboard user has been created successfully."
      else
        echo "An error occurred while creating the public Leaderboard user. HTTP code: $createLeaderboardUserResponse"
        exit 1
      fi

    elif [ "$checkLeaderboardUserResponse" -eq 200 ]; then
      CheckLeaderboardUserKeyAuth=true
      echo "The public Leaderboard user already exists."
    else
      echo "An error occurred while checking the public Leaderboard user. Please check the issue and rerun the script."
    fi

    if [ "$CheckLeaderboardUserKeyAuth" = true ]; then
      # Check if key-auth credentials exist
      leaderboardUser=$(curl -s --write-out "\n%{http_code}" -X GET "$DECK_KONG_ADDR/consumers/$DECK_LEADERBOARD_PUBLIC_CONSUMER_EMAIL/key-auth")
      # Extract HTTP code (last line)
      checkLeaderboardUserKeyAuthResponseCode=$(echo "$leaderboardUser" | tail -n1)
      # Extract JSON body (everything except last line)
      checkLeaderboardUserKeyAuthResponseBody=$(echo "$leaderboardUser" | sed '$d')

      echo "GET key-auth credentials response: $checkLeaderboardUserKeyAuthResponseCode"
      # NOTE: Below logs sensitive info, uncomment only for debugging
      # echo "GET key-auth credentials response body: $checkLeaderboardUserKeyAuthResponseBody"

      if [ "$checkLeaderboardUserKeyAuthResponseCode" -eq 200 ]; then
        if [ -z "$checkLeaderboardUserKeyAuthResponseBody" ]; then
          echo "Error: Empty response body"
          exit 1
        fi

        # Get length of data array
        # Example empty response: {"next":null,"data":[]}
        # Example non-empty response: {"next":null,"data":[{"created_at":1731176797,...]}
        credentailsLength=$(echo "$checkLeaderboardUserKeyAuthResponseBody" | jq -e -r '(.data | length)' 2>/dev/null)
        jq_exit=$?

        if [ $jq_exit -ne 0 ]; then
          echo "Error: Invalid JSON response or missing .data array"
          echo "Response was: $checkLeaderboardUserKeyAuthResponseBody"
          exit 1
        fi

        echo "Found $credentailsLength credential entries"

        if [ "$credentailsLength" -ge 1 ]; then
          echo "key-auth credentials were already created for public Leaderboard user."
        else
          CreateLeaderboardUserKeyAuth=true
          echo "No key-auth credentials found for public Leaderboard user. Need to create them."
        fi

      else
        echo "Failed to check key-auth credentials. HTTP code: $checkLeaderboardUserKeyAuthResponseCode"
        exit 1
      fi
    fi

    if [ "$CreateLeaderboardUserKeyAuth" = true ]; then
      echo "Creating key auth credentials for the public Leaderboard user..."

      # Configure key auth creds for the consumer
      createLeaderboardUserAuthResponse=$(curl -s -o /dev/null -w "%{http_code}" -i -X POST $DECK_KONG_ADDR/consumers/$DECK_LEADERBOARD_PUBLIC_CONSUMER_EMAIL/key-auth --data "{\"key\":\"$DECK_LEADERBOARD_PUBLIC_CONSUMER_API_KEY\"}" --header "Content-Type: application/json")

      echo "POST Leaderboard consumer key auth creation response: $createLeaderboardUserAuthResponse"

      if [ "$createLeaderboardUserAuthResponse" -eq 201 ]; then
        echo "The public Leaderboard user key auth has been created."
      else
        echo "An error occurred while creating the public Leaderboard user key auth. Please check the issue and rerun the script."
        exit 1
      fi
    fi

    # ---------------------------------------------------------
    # Deck sync Kong configuration
    # ---------------------------------------------------------

    echo "Syncing the Kong configuration..."

    # Sync the Kong configuration with the Kong Gateway
    # https://docs.konghq.com/deck/latest/reference/deck/
    deck gateway sync /mnt/deck/kong.yaml --skip-consumers --verbose 0

    # Verify sync was successful
    if [ $? -eq 0 ]; then
      echo "Kong configuration sync completed successfully!"
    else
      echo "Kong configuration sync failed with exit code $?. Please check the issue and rerun the script."
    fi

    echo "---------------------------------------------"
    exit $?
